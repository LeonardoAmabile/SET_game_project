The main task of this section in to create the dataset for the NN in the case of n cards (see Read.me).
 
### Table.h file ###

The purpose of the table.h section is to define a class named Table that can describe a match of SET. To make this we want to create a matrix of num_cards x num_attributes with all different rows.

To modelize the 3 variants of the attributes we will select the values -1, 0, 1. So for example: if an attribute is the color we'll identify as blue=-1, red=0 and green=1.

In this way we can say that a winner SET is a combination of three cards where the sum of each "attribute" is 3, 0 or -3.

Example:
    
Cards have 3 attributes: color, shape and fill.

    color: blue=-1, red=0 and green=1
    shape: diamond=-1, heart=0 and spade=1
    fill: full=-1, dotted=0 and empty=1

The card with a green dotted diamond will be modelized as a row in the Table with values (1, -1, 0). A winning hand is a combination of three cards where the sum of all
the attributes is 3, 0 or -3. In fact the three cards:
    green dotted diamond= (1, -1, 0)
    red dotted heart = (0, -1, 1)
    blue dotted empty = (-1, -1, -1)

    if summed, the vector sum has all values like 3, 0, -3. 

In order to avoid the duplication of cards we'll use a hash function and the unordered maps, in this way all the lookups in the matrix will be in O(1).


### Find_SETs.h file ###


The find_SETs_combined function performs two main operations: it finds all combinations of rows that satisfy the condition of the sum of the first column (i.e.,  the sum of three values from three rows must be -3, 0, or 3) and checks that, for each of these combinations, the sums of all columns are also -3, 0, or 3.

1.Finding valid combinations: The function starts by examining the first column of the table, and using a sorting algorithm, it finds all possible combinations  of three rows that satisfy the condition for the sum of the first column to be -3, 0, or 3.

2.Validating combinations: For each combination found, the function calculates the sum of the rows in the other columns and checks if the sum of each column  satisfies the required condition (-3, 0, or 3). If all conditions are met, the combination is considered valid.

3.Returning and printing: The function returns a list of valid combinations (composed of row indices), and if the print parameter is enabled,  it prints the details of each valid combination, including the rows involved and the column sums.

To chek on all the possible combinations of three cards, the function uses a searching algorithm that operates on O(n^2), optimized for arrays with values of -1, 0 and 1. Combined with the O(n) sorting algorithm the overall complexity of the function is O(n^2). 

### Write_txt.h ###
Includes a function called write_data that creates a .txt file with a personalized name in the directory of the code. The function generates N_tables istances of  Table and finds the number of all the SETs with the previous find_SETs function. Done this in the .txt file it prints the number of SETs found in a determined Table and the analyzed Tables, separated by an empty line.